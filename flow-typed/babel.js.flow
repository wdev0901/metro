/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 * @format
 */

'use strict';

declare type BabelNode_DEPRECATED = any;

type _BabelSourceMap = $ReadOnly<{
  file?: string,
  mappings: string,
  names: Array<string>,
  sourceRoot?: string,
  sources: Array<string>,
  sourcesContent?: Array<?string>,
  version: number,
}>;

type GeneratorOptions = {
  auxiliaryCommentBefore?: string,
  auxiliaryCommentAfter?: string,
  shouldPrintComment?: (comment: string) => boolean,
  retainLines?: boolean,
  retainFunctionParens?: boolean,
  comments?: boolean,
  compact?: boolean | 'auto',
  minified?: boolean,
  concise?: boolean,
  quotes?: 'single' | 'double',
  filename?: string,
  sourceMaps?: boolean,
  sourceMapTarget?: string,
  sourceRoot?: string,
  sourceFileName?: string,
  ...
};

type InlinePlugin = string | {...} | (() => {...});
type _Plugins = Array<string | Object | [InlinePlugin] | [InlinePlugin, mixed]>;
type InlinePreset = string | {...} | (() => {...});
type _Presets = Array<string | Object | [InlinePreset] | [InlinePreset, mixed]>;

export type GeneratorResult = {
  code: string,
  map: ?_BabelSourceMap,
  rawMappings: ?Array<_BabelSourceMapSegment>,
  ...
};

type _BabelSourceMapSegment = {
  generated: {column: number, line: number, ...},
  name?: ?string,
  original?: {column: number, line: number, ...},
  source?: ?string,
  ...
};

type BabelParserOptions = {|
  allowImportExportEverywhere?: boolean,
  allowReturnOutsideFunction?: boolean,
  allowSuperOutsideMethod?: mixed, // "TODO" okay. Maybe don't use this yet.
  sourceType?: 'script' | 'module' | 'unambiguous',
  sourceFilename?: string,
  startLine?: number,
  plugins?: Array<string>, // "plugins" here are built-in features to enable
  strictMode?: boolean, // "TODO" ehh to consider this strict mode?
  ranges?: boolean,
  tokens?: boolean,
|};

type BabelCoreOptions = {|
  ast?: boolean,
  auxiliaryCommentAfter?: ?string,
  auxiliaryCommentBefore?: ?string,
  babelrc?: boolean,
  babelrcRoots?: Array<string>,
  cwd?: string,
  envName?: string,
  caller?: {name: string, ...},
  code?: boolean,
  comments?: boolean,
  compact?: 'auto' | boolean,
  configFile?: boolean | string,
  env?: {
    production: {[string]: mixed, ...},
    staging: {[string]: mixed, ...},
    ...
  },
  extends?: ?string,
  filename?: string,
  filenameRelative?: 'string',
  generatorOpts?: ?GeneratorOptions,
  getModuleId?: ?(string) => string | boolean,
  highlightCode?: boolean,
  ignore?: ?(string | Array<string> | RegExp | Array<string | RegExp>),
  inputSourceMap?: ?_BabelSourceMap,
  minified?: boolean,
  moduleId?: ?string,
  moduleIds?: ?{[string]: string, ...},
  moduleRoot?: string,
  only?: ?(string | Array<string> | RegExp | Array<string | RegExp>),
  parserOpts?: ?BabelParserOptions,
  plugins?: ?_Plugins,
  presets?: ?_Presets,
  retainLines?: boolean,
  root?: string,
  shouldPrintComment?: ?(string) => boolean,
  sourceFileName?: string,
  sourceMaps?: boolean | 'inline' | 'both',
  sourceMapTarget?: string,
  sourceRoot?: string,
  sourceType?: 'module' | 'script' | 'unambiguous',
  wrapPluginVisitorMethod?: ?(
    pluginAlias: string,
    visitorType: string,
    callback: () => void,
  ) => void,
|};

export type BabelSourceLocation = $ReadOnly<{
  start: $ReadOnly<{line: number, column: number}>,
  end: $ReadOnly<{line: number, column: number}>,
}>;

type TemplateOptions = BabelParserOptions & {|
  // note: template defaults for these options;
  // allowReturnOutsideFunction = true
  // allowSuperOutsideMethod = true
  // sourceType = module
  placeholderWhitelist?: Set<string>,
  placeholderPattern?: RegExp | false,
  preserveComments?: boolean,
|};

export type Transform7Result = {|
  code: string,
  map?: _BabelSourceMap,
  ast: BabelNode,
|};

type TransformCallback = (Error => void) | ((void, Transform7Result) => void);

export type TransformSync = (
  code: string,
  options: BabelCoreOptions,
) => Transform7Result;

export type TransformFileSync = (
  filename: string,
  options: BabelCoreOptions,
) => Transform7Result;

export type TransformFromAstSync = (
  ast: BabelNode,
  code?: string,
  options?: BabelCoreOptions,
) => Transform7Result;

type ParseCallback = (Error => void) | ((void, BabelNode) => void);

type void_DO_NOT_USE_SYNC = void;

declare module '@babel/core' {
  import type {Visitor} from '@babel/traverse';

  declare type Ast = BabelNode;
  declare type BabelSourceMap = _BabelSourceMap;
  declare type Plugins = _Plugins;
  declare type Presets = _Presets;
  declare type TransformResult = Transform7Result;
  declare type BabelCoreOptions = BabelCoreOptions;

  declare var version: string;

  // Note: DO NOT USE WITHOUT CALLBACK. Use transformSync instead.
  declare function transform(
    code: string,
    options: BabelCoreOptions,
    callback: TransformCallback,
  ): void_DO_NOT_USE_SYNC;
  declare var transformSync: TransformSync;
  // Note: DO NOT USE WITHOUT CALLBACK. Use transformFileSync instead.
  declare function transformFile(
    filename: string,
    options: BabelCoreOptions,
    callback: TransformCallback,
  ): void_DO_NOT_USE_SYNC;
  declare var transformFileSync: TransformFileSync;
  // Note: DO NOT USE WITHOUT CALLBACK. Use transformFromAstSync instead.
  declare function transformFromAst(
    ast: BabelNode,
    code?: string,
    options?: BabelCoreOptions,
    callback: TransformCallback,
  ): void_DO_NOT_USE_SYNC;
  declare var transformFromAstSync: TransformFromAstSync;

  declare function buildExternalHelpers(Array<string>): string;

  // Note: DO NOT USE WITHOUT CALLBACK. Use parseSync instead.
  declare function parse(
    code: string,
    options: BabelCoreOptions,
    callback: ParseCallback,
  ): void_DO_NOT_USE_SYNC;
  declare function parseSync(
    code: string,
    options?: BabelCoreOptions,
  ): BabelNode;

  declare type PluginObj<TState> = {
    name?: string,
    inherits?: any,
    visitor: Visitor<TState>,
  };
}

declare module '@babel/generator' {
  declare export type BabelSourceMapSegment = _BabelSourceMapSegment;
  declare export default (
    ast: BabelNode,
    options?: GeneratorOptions,
    code?: string | {[string]: string, ...},
  ) => GeneratorResult;
  declare export default (
    ast: BabelNode,
    options?: GeneratorOptions,
    code?: string | {|[filename: string]: string|},
  ) => GeneratorResult;
}

declare module '@babel/template' {
  import type {Node, Statement, Expression, Program} from '@babel/types';
  declare type TemplateArgs = {[tokenName: string]: Node};
  declare type Templatable<TResult> = (args?: TemplateArgs) => TResult;

  declare export function smart(
    template: string,
    options?: TemplateOptions,
  ): Templatable<Statement | Array<Statement>>;

  declare export default typeof smart;

  declare export function expression(
    template: string,
    options?: TemplateOptions,
  ): Templatable<Expression>;

  declare export function statement(
    template: string,
    options?: TemplateOptions,
  ): Templatable<Statement>;

  declare export function statements(
    template: string,
    options?: TemplateOptions,
  ): Templatable<Array<Statement>>;

  declare export function program(
    template: string,
    options?: TemplateOptions,
  ): Templatable<Program>;
}
